create or replace package body ut_adc_admin 
as

   /* generated by utPLSQL for SQL Developer on 2020-07-04 09:30:07 */

   --
   -- test map_id case 1: ...
   --
   procedure map_id is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.map_id;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end map_id;

   --
   -- test merge_rule_group case 1: ...
   --
   procedure merge_rule_group is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.merge_rule_group;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end merge_rule_group;

   --
   -- test delete_rule_group case 1: ...
   --
   procedure delete_rule_group is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.delete_rule_group;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end delete_rule_group;

   --
   -- test validate_rule_group case 1: ...
   --
   procedure validate_rule_group is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.validate_rule_group;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end validate_rule_group;

   --
   -- test propagate_rule_change case 1: ...
   --
   procedure propagate_rule_change is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.propagate_rule_change;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end propagate_rule_change;

   --
   -- test export_rule_group case 1: ...
   --
   procedure export_rule_group is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.export_rule_group;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end export_rule_group;

   --
   -- test export_rule_groups case 1: ...
   --
   procedure export_rule_groups is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.export_rule_groups;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end export_rule_groups;

   --
   -- test prepare_rule_group_import case 1: ...
   --
   procedure prepare_rule_group_import is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.prepare_rule_group_import;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end prepare_rule_group_import;

   --
   -- test merge_apex_action_type case 1: ...
   --
   procedure merge_apex_action_type is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.merge_apex_action_type;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end merge_apex_action_type;

   --
   -- test delete_apex_action_type case 1: ...
   --
   procedure delete_apex_action_type is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.delete_apex_action_type;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end delete_apex_action_type;

   --
   -- test validate_apex_action_type case 1: ...
   --
   procedure validate_apex_action_type is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.validate_apex_action_type;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end validate_apex_action_type;

   --
   -- test merge_apex_action case 1: ...
   --
   procedure merge_apex_action is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.merge_apex_action;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end merge_apex_action;

   --
   -- test delete_apex_action case 1: ...
   --
   procedure delete_apex_action is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.delete_apex_action;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end delete_apex_action;

   --
   -- test validate_apex_action case 1: ...
   --
   procedure validate_apex_action is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.validate_apex_action;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end validate_apex_action;

   --
   -- test merge_apex_action_item case 1: ...
   --
   procedure merge_apex_action_item is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.merge_apex_action_item;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end merge_apex_action_item;

   --
   -- test delete_apex_action_item case 1: ...
   --
   procedure delete_apex_action_item is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.delete_apex_action_item;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end delete_apex_action_item;

   --
   -- test validate_apex_action_item case 1: ...
   --
   procedure validate_apex_action_item is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.validate_apex_action_item;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end validate_apex_action_item;

   --
   -- test merge_rule case 1: ...
   --
   procedure merge_rule is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.merge_rule;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end merge_rule;

   --
   -- test delete_rule case 1: ...
   --
   procedure delete_rule is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.delete_rule;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end delete_rule;

   --
   -- test validate_rule case 1: ...
   --
   procedure validate_rule is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.validate_rule;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end validate_rule;

   --
   -- test resequence_rule case 1: ...
   --
   procedure resequence_rule is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.resequence_rule;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end resequence_rule;

   --
   -- test merge_action_type_group case 1: ...
   --
   procedure merge_action_type_group is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.merge_action_type_group;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end merge_action_type_group;

   --
   -- test delete_action_type_group case 1: ...
   --
   procedure delete_action_type_group is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.delete_action_type_group;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end delete_action_type_group;

   --
   -- test validate_action_type_group case 1: ...
   --
   procedure validate_action_type_group is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.validate_action_type_group;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end validate_action_type_group;

   --
   -- test merge_action_param_type case 1: ...
   --
   procedure merge_action_param_type is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.merge_action_param_type;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end merge_action_param_type;

   --
   -- test delete_action_param_type case 1: ...
   --
   procedure delete_action_param_type is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.delete_action_param_type;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end delete_action_param_type;

   --
   -- test validate_action_param_type case 1: ...
   --
   procedure validate_action_param_type is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.validate_action_param_type;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end validate_action_param_type;

   --
   -- test merge_action_item_focus case 1: ...
   --
   procedure merge_action_item_focus is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.merge_action_item_focus;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end merge_action_item_focus;

   --
   -- test delete_action_item_focus case 1: ...
   --
   procedure delete_action_item_focus is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.delete_action_item_focus;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end delete_action_item_focus;

   --
   -- test validate_action_item_focus case 1: ...
   --
   procedure validate_action_item_focus is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.validate_action_item_focus;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end validate_action_item_focus;

   --
   -- test merge_action_type case 1: ...
   --
   procedure merge_action_type is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.merge_action_type;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end merge_action_type;

   --
   -- test delete_action_type case 1: ...
   --
   procedure delete_action_type is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.delete_action_type;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end delete_action_type;

   --
   -- test validate_action_type case 1: ...
   --
   procedure validate_action_type is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.validate_action_type;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end validate_action_type;

   --
   -- test export_action_types case 1: ...
   --
   procedure export_action_types is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.export_action_types;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end export_action_types;

   --
   -- test merge_action_parameter case 1: ...
   --
   procedure merge_action_parameter is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.merge_action_parameter;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end merge_action_parameter;

   --
   -- test delete_action_parameter case 1: ...
   --
   procedure delete_action_parameter is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.delete_action_parameter;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end delete_action_parameter;

   --
   -- test validate_action_parameter case 1: ...
   --
   procedure validate_action_parameter is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.validate_action_parameter;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end validate_action_parameter;

   --
   -- test merge_rule_action case 1: ...
   --
   procedure merge_rule_action is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.merge_rule_action;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end merge_rule_action;

   --
   -- test delete_rule_action case 1: ...
   --
   procedure delete_rule_action is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.delete_rule_action;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end delete_rule_action;

   --
   -- test validate_rule_action case 1: ...
   --
   procedure validate_rule_action is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.validate_rule_action;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end validate_rule_action;

   --
   -- test add_translation case 1: ...
   --
   procedure add_translation is
      l_actual   integer := 0;
      l_expected integer := 1;
   begin
      -- populate actual
      -- adc_admin.add_translation;

      -- populate expected
      -- ...

      -- assert
      ut.expect(l_actual).to_equal(l_expected);
   end add_translation;

end ut_adc_admin;
